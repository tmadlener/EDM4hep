---
options:
  getSyntax: True
  exposePODMembers: False
  includeSubfolder: True

components:

    # Vector3D with floats
    edm4hep::Vector3f :
      x : float
      y : float
      z : float
      ExtraCode :
        declaration: "
        Vector3f() : x(0),y(0),z(0) {}\n
        Vector3f(float xx, float yy, float zz) : x(xx),y(yy),z(zz) {}\n
        Vector3f(const float* v) : x(v[0]),y(v[1]),z(v[2]) {}\n
        bool operator==(const Vector3f& v) const { return (x==v.x&&y==v.y&&z==v.z) ; }\n
        float operator[](unsigned i) const { return *( &x + i ) ; }\n
        "

    # Vector3D with doubles
    edm4hep::Vector3d :
      x : double
      y : double
      z : double
      ExtraCode :
        declaration: "
        Vector3d() : x(0),y(0),z(0) {}\n
        Vector3d(double xx, double yy, double zz) : x(xx),y(yy),z(zz) {}\n
        Vector3d(const double* v) : x(v[0]),y(v[1]),z(v[2]) {}\n
        Vector3d(const float* v) : x(v[0]),y(v[1]),z(v[2]) {}\n
        bool operator==(const Vector3d& v) const { return (x==v.x&&y==v.y&&z==v.z) ; }\n
        double operator[](unsigned i) const { return *( &x + i ) ; }\n
        "

    # Vector2D with ints
    edm4hep::Vector2i :
      a : int
      b : int
      ExtraCode :
        declaration: "
        Vector2i() : a(0),b(0) {}\n
        Vector2i(int aa,int bb) : a(aa),b(bb) {}\n
        Vector2i( const int* v) : a(v[0]), b(v[1]) {}\n
        bool operator==(const Vector2i& v) const { return (a==v.a&&b==v.b) ; }\n
        int operator[](unsigned i) const { return *( &a + i ) ; }\n
        "
      # Parametrized description of a particle track
    edm4hep::TrackState:
      location       : int # for use with At{Other|IP|FirstHit|LastHit|Calorimeter|Vertex}|LastLocation
      D0             : float # transverse impact parameter
      phi            : float # azimuthal angle 
      omega          : float # is the signed curvature of the track in [1/mm].
      Z0             : float # longitudinal impact parameter
      tanLambda      : float # lambda is the dip angle of the track in r-z
      referencePoint : edm4hep::Vector3f # Reference point of the track parameters, e.g. the origin at the IP, or the position  of the first/last hits or the entry point into the calorimeter.
      covMatrix      : std::array<float,15> # upper triangular covariance matrix of the track parameters.  the order of parameters is:   d0, phi, omega, z0, tan(lambda). 
      ExtraCode :
        const_declaration: "
        static const int AtOther = 0 ; // any location other than the ones defined below\n   
        static const int AtIP = 1 ;\n
        static const int AtFirstHit = 2 ;\n                   
        static const int AtLastHit = 3 ;\n                  
        static const int AtCalorimeter = 4 ;\n                
        static const int AtVertex = 5 ;\n     
        static const int LastLocation = AtVertex  ;\n
        "

    #------ ObjectID helper struct for references/relations
    edm4hep::ObjectID:
      index        : int
      collectionID : int
      ExtraCode :
        includes: "#include <podio/ObjectID.h>\n"
        declaration: "
        ObjectID() = default;\n
        ObjectID(const podio::ObjectID& id ): index(id.index), collectionID(id.collectionID) {}\n
      "


datatypes :


  edm4hep::EventHeader:
    Description: "Event Header. Additional parameters are assumed to go into the metadata tree."
    Author : "F.Gaede"
    Members:
      - int eventNumber    //event number
      - int runNumber      //run number
      - unsigned long long timeStamp     //time stamp
      - float weight       // event weight


  edm4hep::MCParticle:
    Description: "The Monte Carlo particle - based on the lcio::MCParticle."
    Author : "F.Gaede, DESY"
    Members:
      - int PDG                         //PDG code of the particle
      - int generatorStatus             //status of the particle as defined by the generator
      - int simulatorStatus             //status of the particle from the simulation program - use BIT constants below
      - float charge                    //particle charge
      - float time                      //creation time of the particle in [ns] wrt. the event, e.g. for preassigned decays or decays in flight from the simulator.
      - double mass                     //mass of the particle in [GeV]
      - edm4hep::Vector3d vertex              //production vertex of the particle in [mm].
      - edm4hep::Vector3d endpoint            //endpoint of the particle in [mm]
      - edm4hep::Vector3f momentum             //particle 3-momentum at the production vertex in [GeV]
      - edm4hep::Vector3f momentumAtEndpoint   //particle 3-momentum at the endpoint in [GeV]
      - edm4hep::Vector3f spin                 //spin (helicity) vector of the particle.
      - edm4hep::Vector2i colorFlow                //color flow as defined by the generator
    OneToManyRelations:
      - edm4hep::MCParticle parents // The parents of this particle.
      - edm4hep::MCParticle daughters // The daughters this particle.
    ExtraCode :
      includes: "#include <math.h>\n
      "
      const_declaration: "
      // define the bit positions for the simulation flag\n
      static const int BITEndpoint = 31;\n
      static const int BITCreatedInSimulation = 30;\n
      static const int BITBackscatter = 29 ;\n
      static const int BITVertexIsNotEndpointOfParent = 28 ;  \n
      static const int BITDecayedInTracker = 27 ; \n
      static const int BITDecayedInCalorimeter = 26 ;   \n
      static const int BITLeftDetector = 25 ;     \n
      static const int BITStopped = 24 ;    \n
      static const int BITOverlay = 23 ;    \n
      /// return energy computed from momentum and mass \n
      double getEnergy() const { return sqrt( getMomentum()[0]*getMomentum()[0]+getMomentum()[1]*getMomentum()[1]+\n
                                        getMomentum()[2]*getMomentum()[2] + getMass()*getMass()  )  ;} \n

      /// True if the particle has been created by the simulation program (rather than the generator).     \n
      bool isCreatedInSimulation() const { return ( getSimulatorStatus() & ( 0x1 << BITCreatedInSimulation ))  ; }    \n
      /// True if the particle is the result of a backscatter from a calorimeter shower. \n
      bool isBackscatter() const { return ( getSimulatorStatus() & ( 0x1 << BITBackscatter )) ; }   \n
      /// True if the particle's vertex is not the endpoint of the  parent particle.     \n
      bool vertexIsNotEndpointOfParent() const { return ( getSimulatorStatus() & ( 0x1 << BITVertexIsNotEndpointOfParent )) ; } \n
      /// True if the particle has interacted in a tracking region.                \n
      bool isDecayedInTracker() const { return ( getSimulatorStatus() & ( 0x1 << BITDecayedInTracker )) ; }     \n
      /// True if the particle has interacted in a calorimeter region.             \n
      bool isDecayedInCalorimeter() const { return ( getSimulatorStatus() & ( 0x1 << BITDecayedInCalorimeter )) ; }   \n
      /// True if the particle has left the world volume undecayed.                \n
      bool hasLeftDetector() const { return ( getSimulatorStatus() & ( 0x1 << BITLeftDetector )) ; }\n
      /// True if the particle has been stopped by the simulation program.         \n
      bool isStopped() const { return ( getSimulatorStatus() & ( 0x1 << BITStopped )) ; }     \n
      /// True if the particle has been overlayed by the simulation (or digitization)  program.\n
      bool isOverlay() const { return ( getSimulatorStatus() & ( 0x1 << BITOverlay )) ; }     \n
      "

      declaration: "
      int  set_bit(int val, int num, bool bitval){ return (val & ~(1<<num)) | (bitval << num); }                               \n
      void setCreatedInSimulation(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITCreatedInSimulation , bitval ) ) ;  }  		     \n
      void setBackscatter(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITBackscatter , bitval ) ) ;   }  			     \n
      void setVertexIsNotEndpointOfParent(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITVertexIsNotEndpointOfParent , bitval ) ) ; } \n
      void setDecayedInTracker(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITDecayedInTracker , bitval ) ) ;   }  		     \n
      void setDecayedInCalorimeter(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITLeftDetector , bitval ) ) ;   }  		     \n
      void setHasLeftDetector(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITLeftDetector , bitval ) ) ;   }  			     \n
      void setStopped(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITStopped , bitval ) ) ;   }  				     \n
      void setOverlay(bool bitval) { setSimulatorStatus( set_bit( getSimulatorStatus() , BITOverlay , bitval ) ) ;   }         \n 
      "
      implementation : ""




  #----------- SimTrackerHit
  edm4hep::SimTrackerHit:
    Description: "Simulated tracker hit"
    Author : "F.Gaede, DESY"
    Members:
      - unsigned long long cellID      //ID of the sensor that created this hit
      - float EDep                     //energy deposited in the hit [GeV].
      - float time                     //proper time of the hit in the lab frame in [ns].
      - float pathLength               //path length of the particle in the sensitive material that resulted in this hit.
      - int   quality                  //quality bit flag.
      - edm4hep::Vector3d position     //the hit position in [mm].
      - edm4hep::Vector3f momentum     //the 3-momentum of the particle at the hits position in [GeV]
    OneToOneRelations:
      - edm4hep::MCParticle MCParticle //MCParticle that caused the hit.
    ExtraCode :
      includes: "#include <math.h>\n
      "
      const_declaration: "
      static const int  BITOverlay = 31;\n
      static const int  BITProducedBySecondary = 30;\n
      bool isOverlay() const { return getQuality() & (1 << BITOverlay) ; }\n
      bool isProducedBySecondary() const { return getQuality() & (1 << BITProducedBySecondary) ; }\n
      double x() const {return getPosition()[0];}\n
      double y() const {return getPosition()[1];}\n
      double z() const {return getPosition()[2];}\n
      double rho() const {return sqrt(x()*x() + y()*y());}\n
      "
      declaration: "
      int  set_bit(int val, int num, bool bitval){ return (val & ~(1<<num)) | (bitval << num); }\n
      void setOverlay(bool val) { setQuality( set_bit( getQuality() , BITOverlay , val ) ) ;   }\n
      void setProducedBySecondary(bool val) { setQuality( set_bit( getQuality() , BITProducedBySecondary , val ) ) ;   }\n
      "

  #------------- CaloHitContribution
  edm4hep::CaloHitContribution:
    Description: "Monte Carlo contribution to SimCalorimeterHit"
    Author : "F.Gaede, DESY"
    Members:
      - int   PDG                        //PDG code of the shower particle that caused this contribution.
      - float energy                     //energy in [GeV] of the this contribution
      - float time                       //time in [ns] of this contribution
      - edm4hep::Vector3f stepPosition   //position of this energy deposition (step)
    OneToOneRelations:
      - edm4hep::MCParticle particle     //primary MCParticle that caused the shower responsible for this contribution to the hit.

  #------------- SimCalorimeterHit
  edm4hep::SimCalorimeterHit:
    Description: "Simulated calorimeter hit"
    Author : "F.Gaede, DESY"
    Members:
      - unsigned long long cellID       //ID of the sensor that created this hit
      - float energy                    //energy of the hit in [GeV].
      - edm4hep::Vector3f position      //position of the hit in world coordinates.
    OneToManyRelations:
      - edm4hep::CaloHitContribution contributions  //Monte Carlo step contribution - parallel to particle


  #-------------  RawCalorimeterHit
  edm4hep::RawCalorimeterHit:
    Description: "Raw calorimeter hit"
    Author : "F.Gaede, DESY"
    Members:
      - unsigned long long cellID   //detector specific (geometrical) cell id.
      - int amplitude               //amplitude of the hit in ADC counts.
      - int timeStamp               //time stamp for the hit.

  #-------------  CalorimeterHit
  edm4hep::CalorimeterHit:
    Description: "Calorimeter hit"
    Author : "F.Gaede, DESY"
    Members:
      - unsigned long long cellID  //detector specific (geometrical) cell id.
      - float energy               //energy of the hit in [GeV].
      - float energyError          //error of the hit energy in [GeV].
      - float time                 //time of the hit in [ns].
      - edm4hep::Vector3f position //position of the hit in world coordinates.
      - int type                   //type of hit. Mapping of integer types to names via collection parameters "CalorimeterHitTypeNames" and "CalorimeterHitTypeValues". 

 #---------- ParticleID
  edm4hep::ParticleID:
    Description:  "ParticleID"
    Author : "F.Gaede, DESY"
    Members:
      - int   type           //userdefined type 
      - int   pDG            //PDG code of this id - ( 999999 ) if unknown. 
      - int   algorithmType  //type of the algorithm/module that created this hypothesis
      - float likelihood     //likelihood of this hypothesis - in a user defined normalization.
    VectorMembers:
      - float parameters     //parameters associated with this hypothesis. Check/set collection parameters ParameterNames_PIDAlgorithmTypeName for decoding the indices.


 #------ Cluster
  edm4hep::Cluster:
    Description: "Calorimeter Hit Cluster"
    Author : "F.Gaede, DESY"
    Members:
      - int                  type            //flagword that defines the type of cluster. Bits 16-31 are used internally. 
      - float                energy          //energy of the cluster [GeV]
      - float                energyError     //error on the energy
      - edm4hep::Vector3f    position        //position of the cluster.
      - std::array<float,6>  positionError   //covariance matrix of the position (6 Parameters)
      - float                iTheta          //intrinsic direction of cluster at position  Theta. Not to be confused with direction cluster is seen from IP. 
      - float                phi             //intrinsic direction of cluster at position - Phi. Not to be confused with direction cluster is seen from IP. 
      - edm4hep::Vector3f    directionError  //covariance matrix of the direction (3 Parameters)
    VectorMembers:
      - float   shapeParameters      //shape parameters - check/set collection parameter ClusterShapeParameters for size and names of parameters.
      - float   hitContributions     //energy contribution of the hits Runs parallel to the CalorimeterHitVec from getCalorimeterHits(). 
      - float   subdetectorEnergies  //energy observed in a particular subdetector. Check/set collection parameter ClusterSubdetectorNames for decoding the indices of the array. 
    OneToManyRelations:
      - edm4hep::Cluster        clusters     //clusters that have been combined to this cluster.
      - edm4hep::CalorimeterHit hits         //hits that have been combined to this cluster.
      - edm4hep::ParticleID     particleIDs  //particle IDs (sorted by their likelihood) 

  #-------------  TrackerHit
  edm4hep::TrackerHit:
    Description : "Tracker hit"
    Author : "F.Gaede, DESY"
    Members :
      - unsigned long long cellID      //ID of the sensor that created this hit
      - int type                       //type of raw data hit, either one of edm4hep::TPCHIT, edm4hep::SIMTRACKERHIT - see collection parameters "TrackerHitTypeNames" and "TrackerHitTypeValues". 
      - int quality                    //quality bit flag of the hit.    
      - float time                     //time of the hit.
      - float eDep                     //energy deposited on the hit [GeV]. 
      - float eDepError                //error measured on EDep [GeV].
      - float edx                      //dE/dx of the hit in [GeV/mm]. 
      - edm4hep::Vector3d position     //hit position in [mm].
      - std::array<float,6> covMatrix  //covariance of the position (x,y,z), stored as lower triangle matrix. i.e. cov(x,x) , cov(y,x) , cov(y,y) , cov(z,x) , cov(z,y) , cov(z,z)
    VectorMembers:
      - edm4hep::ObjectID  rawHits     //raw data hits. Check getType to get actual data type. 


 #----------  TPCHit
  edm4hep::TPCHit:
    Description: "Time Projection Chamber Hit"
    Author : "F.Gaede, DESY"
    Members:
       - unsigned long long cellID  //detector specific cell id. 
       - int quality                //quality flag for the hit. 
       - float time                 //time of the hit. 
       - float charge               //integrated charge of the hit. 
    VectorMembers:
       - int rawDataWords           //raw data (32-bit) word at i.

 #-------- Track 
  edm4hep::Track:
    Description: "Reconstructed track"
    Author : "F.Gaede, DESY"
    Members:
      - int type                         //flagword that defines the type of track.Bits 16-31 are used internally
      - float chi2                       //Chi^2 of the track fit
      - int ndf                          //number of degrees of freedom of the track fit
      - float dEdx                       //dEdx of the track.
      - float dEdxError                  //error of dEdx.
      - float radiusOfInnermostHit       //radius of the innermost hit that has been used in the track fit
    VectorMembers:
      - int subDetectorHitNumbers        //number of hits in particular subdetectors.Check/set collection variable TrackSubdetectorNames for decoding the indices 
      - edm4hep::TrackState trackStates  //track states
    OneToManyRelations:
      - edm4hep::TrackerHit trackerHits  //hits that have been used to create this track
      - edm4hep::Track tracks            //tracks (segments) that have been combined to create this track

 #---------- Vertex
  edm4hep::Vertex:
    Description: "Vertex"
    Author : "F.Gaede, DESY"
    Members:
      - int                 primary       //boolean flag, if vertex is the primary vertex of the event
      - float               chi2          //chi-squared of the vertex fit
      - float               probability   //probability of the vertex fit
      - edm4hep::Vector3f   position      // [mm] position of the vertex.
      - std::array<float,6> covMatrix     //covariance matrix of the position (stored as lower triangle matrix, i.e. cov(xx),cov(y,x),cov(z,x),cov(y,y),... )
      - int                 algorithmType //type code for the algorithm that has been used to create the vertex - check/set the collection parameters AlgorithmName and AlgorithmType. 
    VectorMembers:
      - float               parameters    //additional parameters related to this vertex - check/set the collection parameter "VertexParameterNames" for the parameters meaning. 
    OneToOneRelations:
      - edm4hep::ReconstructedParticle associatedParticle //reconstructed particle associated to this vertex.


  #------- ReconstructedParticle
  edm4hep::ReconstructedParticle:
    Description: "Reconstructed Particle"
    Author : "F.Gaede, DESY"
    Members:
      - int                    type           //type of reconstructed particle. Check/set collection parameters ReconstructedParticleTypeNames and ReconstructedParticleTypeValues.
      - float                  energy         // [GeV] energy of the reconstructed particle.
      - edm4hep::Vector3f      momentum       // [GeV] particle momentum
      - edm4hep::Vector3f      referencePoint // [mm] reference, i.e. where the particle has been measured
      - float                  charge         //charge of the reconstructed particle.
      - float                  mass           // [GeV] mass of the reconstructed particle, set independently from four vector
      - float                  goodnessOfPID  //overall goodness of the PID on a scale of [0;1]
      - std::array<float,10>   covMatrix      //cvariance matrix of the reconstructed particle 4vector (10 parameters). Stored as lower triangle matrix of the four momentum (px,py,pz,E), i.e. cov(px,px), cov(py,##
    OneToOneRelations:
      - edm4hep::Vertex          startVertex    //start vertex associated to this particle
      - edm4hep::ParticleID      particleIDUsed //particle Id used for the kinematics of this particle
    OneToManyRelations:
      - edm4hep::Cluster               clusters     //clusters that have been used for this particle. 
      - edm4hep::Track                 tracks       //tracks that have been used for this particle. 
      - edm4hep::ReconstructedParticle particles    //reconstructed particles that have been combined to this particle.
      - edm4hep::ParticleID            particleIDs  //particle Ids (not sorted by their likelihood) 
    ExtraCode:
      declaration: "
      bool isCompound() { return particles_size() > 0 ;}\n
      //vertex where the particle decays This method actually returns the start vertex from the first daughter particle found.\n 
      //TODO: edm4hep::Vertex  getEndVertex() { return  edm4hep::Vertex(  (getParticles(0).isAvailable() ? getParticles(0).getStartVertex() :  edm4hep::Vertex(0,0) ) ) ; }\n     
      "

  edm4hep::MCRecoParticleAssociation:
    Description: "Used to keep track of the correspondence between MC and reconstructed particles"
    Author: "C. Bernet, B. Hegner"
    Members:
      - float weight                        // weight of this association
    OneToOneRelations :
     - edm4hep::ReconstructedParticle  rec  // reference to the reconstructed particle
     - edm4hep::MCParticle sim              // reference to the Monte-Carlo particle


  edm4hep::MCRecoCaloAssociation:
    Description: "Association between a CaloHit and the corresponding simulated CaloHit"
    Author: "C. Bernet, B. Hegner"
    Members:
      - float weight                    // weight of this association
    OneToOneRelations:
     - edm4hep::CalorimeterHit rec     // reference to the reconstructed hit
     - edm4hep::SimCalorimeterHit sim  // reference to the simulated hit

  edm4hep::MCRecoTrackerAssociation:
    Description: "Association between a TrackerHit and the corresponding simulated TrackerHit"
    Author : "C. Bernet, B. Hegner"
    Members:
      - float weight              // weight of this association
    OneToOneRelations:
     - edm4hep::TrackerHit rec    // reference to the reconstructed hit
     - edm4hep::SimTrackerHit sim // reference to the simulated hit
     
